
#######################################################
###Generated by PlainSyc, a plain SysC Compiler########
##### presented by bzq @ hust##########################
#######################################################
.arch armv8-a
.arm
.fpu vfp
.macro mov32I, reg, val
    movw \reg, #:lower16:\val
    movt \reg, #:upper16:\val
.endm


.data
.global __VAR__max
__VAR__max:
.word	1073741824
.text
.global checkrange
.type checkrange, %function
checkrange:
WHILE_STMT_2:
    CMP      r0, #1073741824
    BLE      DONE_2
    SUB      r0, r0, #1073741824
    B        WHILE_STMT_2
DONE_2:
WHILE_STMT_6:
    CMP      r0, #0
    BGE      DONE_6
    ADD      r0, r0, #1073741824
    B        WHILE_STMT_6
DONE_6:
    MOV      pc, lr
.text
.global reduce
.type reduce, %function
reduce:
    SUB      sp, sp, #20
    ADD      r12, sp, #0
    STM      r12, {r4,r5,r6,r7,r11}
IF_STMT_13:
    CMP      r0, #0
    BNE      ELSE_13
THEN_13:
    ADD      r3, r1, r2
WHILE_STMT_600:
    CMP      r3, #1073741824
    BLE      DONE_600
    SUB      r3, r3, #1073741824
    B        WHILE_STMT_600
DONE_600:
WHILE_STMT_603:
    CMP      r3, #0
    BGE      DONE_603
    ADD      r3, r3, #1073741824
    B        WHILE_STMT_603
DONE_603:
    B        INLINE_END_605
INLINE_END_605:
    MOV      r0, r3
    ADD      r12, sp, #0
    LDM      r12, {r4,r5,r6,r7,r11}
    ADD      sp, sp, #20
    MOV      pc, lr
ELSE_13:
IF_END_13:
IF_STMT_16:
    CMP      r0, #1
    BNE      ELSE_16
THEN_16:
    MOV      r3, #1
    MOV      r4, #0
WHILE_STMT_21:
    CMP      r3, #1073741824
    BGE      DONE_21
IF_STMT_43:
    SDIV     r5, r1, r3
    MOV      r12, #2
    SDIV     r6, r5, r12
    LSL      r6, r6, #1
    SUB      r5, r5, r6
    SDIV     r6, r2, r3
    MOV      r12, #2
    SDIV     r7, r6, r12
    LSL      r7, r7, #1
    SUB      r6, r6, r7
    CMP      r5, r6
    BNE      ELSE_43
THEN_43:
    LSL      r5, r4, #1
    B        IF_END_43
ELSE_43:
    LSL      r6, r4, #1
    ADD      r5, r6, #1
IF_END_43:
    LSL      r3, r3, #1
    MOV      r4, r5
    B        WHILE_STMT_21
DONE_21:
    MOV      r0, r4
    ADD      r12, sp, #0
    LDM      r12, {r4,r5,r6,r7,r11}
    ADD      sp, sp, #20
    MOV      pc, lr
ELSE_16:
IF_END_16:
IF_STMT_59:
    CMP      r0, #2
    BNE      ELSE_59
THEN_59:
IF_STMT_60:
    CMP      r1, r2
    BLE      ELSE_60
THEN_60:
    MOV      r0, r1
    ADD      r12, sp, #0
    LDM      r12, {r4,r5,r6,r7,r11}
    ADD      sp, sp, #20
    MOV      pc, lr
ELSE_60:
    MOV      r0, r2
    ADD      r12, sp, #0
    LDM      r12, {r4,r5,r6,r7,r11}
    ADD      sp, sp, #20
    MOV      pc, lr
ELSE_59:
IF_END_59:
IF_STMT_61:
    CMP      r0, #3
    BNE      ELSE_61
THEN_61:
    MOV      r3, #1
    MOV      r4, #0
WHILE_STMT_66:
    CMP      r3, #1073741824
    BGE      DONE_66
IF_STMT_103:
    SDIV     r5, r1, r3
    MOV      r12, #2
    SDIV     r6, r5, r12
    LSL      r6, r6, #1
    SUB      r5, r5, r6
    CMP      r5, #1
    MOV      r5, #1
    BEQ      END_117
    SDIV     r6, r2, r3
    MOV      r12, #2
    SDIV     r7, r6, r12
    LSL      r7, r7, #1
    SUB      r6, r6, r7
    CMP      r6, #1
    MOVEQ    r5, #1
    MOVNE    r5, #0
END_117:
    CMP      r5, #0
    BEQ      ELSE_103
THEN_103:
    LSL      r5, r4, #1
    ADD      r5, r5, #1
    B        IF_END_103
ELSE_103:
    LSL      r5, r4, #1
IF_END_103:
    LSL      r3, r3, #1
    MOV      r4, r5
    B        WHILE_STMT_66
DONE_66:
    MOV      r0, r4
    ADD      r12, sp, #0
    LDM      r12, {r4,r5,r6,r7,r11}
    ADD      sp, sp, #20
    MOV      pc, lr
ELSE_61:
IF_END_61:
IF_STMT_134:
    CMP      r0, #4
    BNE      ELSE_134
THEN_134:
    MOV      r0, #1
    MOV      r3, #0
WHILE_STMT_139:
    CMP      r0, #1073741824
    BGE      DONE_139
IF_STMT_176:
    SDIV     r4, r1, r0
    MOV      r12, #2
    SDIV     r5, r4, r12
    LSL      r5, r5, #1
    SUB      r4, r4, r5
    CMP      r4, #1
    MOV      r4, #0
    BNE      END_190
    SDIV     r5, r2, r0
    MOV      r12, #2
    SDIV     r6, r5, r12
    LSL      r6, r6, #1
    SUB      r5, r5, r6
    CMP      r5, #1
    MOVEQ    r4, #1
    MOVNE    r4, #0
END_190:
    CMP      r4, #0
    BEQ      ELSE_176
THEN_176:
    LSL      r4, r3, #1
    ADD      r4, r4, #1
    B        IF_END_176
ELSE_176:
    LSL      r4, r3, #1
IF_END_176:
    LSL      r0, r0, #1
    MOV      r3, r4
    B        WHILE_STMT_139
DONE_139:
    MOV      r0, r3
    ADD      r12, sp, #0
    LDM      r12, {r4,r5,r6,r7,r11}
    ADD      sp, sp, #20
    MOV      pc, lr
ELSE_134:
IF_END_134:
    MOV      r0, #0
    ADD      r12, sp, #0
    LDM      r12, {r4,r5,r6,r7,r11}
    ADD      sp, sp, #20
    MOV      pc, lr
.text
.global getvalue
.type getvalue, %function
getvalue:
    SUB      sp, sp, #12
    STR      r4, [sp,#0]
    STR      r5, [sp,#4]
    LDR      r4, [sp,#12]
IF_STMT_212:
    CMP      r3, #0
    MOV      r5, #1
    BLT      END_241
    CMP      r4, #0
    MOVLT    r5, #1
    MOVGE    r5, #0
END_241:
    CMP      r5, #0
    MOV      r5, #1
    BNE      END_237
    CMP      r3, r1
    MOVGE    r5, #1
    MOVLT    r5, #0
END_237:
    CMP      r5, #0
    MOV      r1, #1
    BNE      END_229
    CMP      r4, r2
    MOVGE    r1, #1
    MOVLT    r1, #0
END_229:
    CMP      r1, #0
    BEQ      ELSE_212
THEN_212:
    MOV      r0, #0
    LDR      r4, [sp,#0]
    LDR      r5, [sp,#4]
    ADD      sp, sp, #12
    MOV      pc, lr
ELSE_212:
IF_END_212:
    MUL      r1, r3, r2
    ADD      r1, r1, r4
    LSL      r1, r1, #2
    MOV      r12, r0
    LDR      r0, [r1,r12]
    LDR      r4, [sp,#0]
    LDR      r5, [sp,#4]
    ADD      sp, sp, #12
    MOV      pc, lr
.text
.global convn
.type convn, %function
convn:
    SUB      sp, sp, #92
    STR      lr, [sp,#88]
    ADD      r12, sp, #56
    STM      r12, {r4,r5,r6,r7,r8,r9,r10,r11}
    STR      r2, [sp,#16]
    STR      r3, [sp,#4]
    LDR      r12, [sp,#92]
    STR      r12, [sp,#12]
    LDR      r5, [sp,#96]
    MOV      r12, #0
    STR      r12, [sp,#0]
WHILE_STMT_265:
    MOV      r12, #0
    STR      r12, [sp,#8]
    MOV      r12, #2
    SDIV     r8, r5, r12
    LDR      r12, [sp,#0]
    LDR      r11, [sp,#12]
    MUL      r12, r12, r11
    STR      r12, [sp,#24]
    LDR      r12, [sp,#0]
    SUB      r8, r12, r8
WHILE_STMT_410:
    MOV      r12, #0
    STR      r12, [sp,#20]
    STR      r8, [sp,#28]
    MOV      r12, #2
    SDIV     r6, r5, r12
    MOV      r12, #2
    SDIV     r3, r5, r12
    LDR      r12, [sp,#8]
    SUB      r6, r12, r6
    LDR      r12, [sp,#0]
    ADD      r12, r12, r3
    STR      r12, [sp,#36]
WHILE_STMT_481:
    LDR      r12, [sp,#20]
    STR      r12, [sp,#32]
    STR      r6, [sp,#40]
    MOV      r12, #2
    SDIV     r2, r5, r12
    LDR      r12, [sp,#8]
    ADD      r12, r12, r2
    STR      r12, [sp,#48]
WHILE_STMT_510:
    MOV      r10, r1
    LDR      r9, [sp,#4]
    LDR      r14, [sp,#12]
    LDR      r7, [sp,#28]
    LDR      r3, [sp,#40]
IF_STMT_611:
    CMP      r7, #0
    MOV      r4, #1
    BLT      END_613
    CMP      r3, #0
    MOVLT    r4, #1
    MOVGE    r4, #0
END_613:
    CMP      r4, #0
    MOV      r4, #1
    BNE      END_616
    CMP      r7, r9
    MOVGE    r4, #1
    MOVLT    r4, #0
END_616:
    CMP      r4, #0
    MOV      r4, #1
    BNE      END_619
    CMP      r3, r14
    MOVGE    r4, #1
    MOVLT    r4, #0
END_619:
    CMP      r4, #0
    BEQ      ELSE_611
THEN_611:
    MOV      r4, #0
    B        INLINE_END_625
ELSE_611:
IF_END_611:
    MUL      r7, r7, r14
    ADD      r3, r7, r3
    LSL      r3, r3, #2
    MOV      r12, r10
    LDR      r4, [r3,r12]
    B        INLINE_END_625
INLINE_END_625:
    MOV      r3, r0
    LDR      r7, [sp,#32]
    STR      r4, [sp,#52]
IF_STMT_629:
    CMP      r3, #0
    BNE      ELSE_629
THEN_629:
    LDR      r12, [sp,#52]
    ADD      r9, r7, r12
WHILE_STMT_633:
    CMP      r9, #1073741824
    BLE      DONE_633
    SUB      r9, r9, #1073741824
    B        WHILE_STMT_633
DONE_633:
WHILE_STMT_636:
    CMP      r9, #0
    BGE      DONE_636
    ADD      r9, r9, #1073741824
    B        WHILE_STMT_636
DONE_636:
    STR      r9, [sp,#44]
    B        INLINE_END_639
INLINE_END_639:
    B        INLINE_END_702
ELSE_629:
IF_END_629:
IF_STMT_640:
    CMP      r3, #1
    BNE      ELSE_640
THEN_640:
    MOV      r10, #1
    MOV      r14, #0
WHILE_STMT_643:
    CMP      r10, #1073741824
    BGE      DONE_643
IF_STMT_644:
    SDIV     r9, r7, r10
    MOV      r12, #2
    SDIV     r2, r9, r12
    LSL      r2, r2, #1
    SUB      r2, r9, r2
    LDR      r12, [sp,#52]
    SDIV     r9, r12, r10
    MOV      r12, #2
    SDIV     r4, r9, r12
    LSL      r4, r4, #1
    SUB      r4, r9, r4
    CMP      r2, r4
    BNE      ELSE_644
THEN_644:
    LSL      r2, r14, #1
    B        IF_END_644
ELSE_644:
    LSL      r4, r14, #1
    ADD      r2, r4, #1
IF_END_644:
    LSL      r10, r10, #1
    MOV      r14, r2
    B        WHILE_STMT_643
DONE_643:
    STR      r14, [sp,#44]
    B        INLINE_END_702
ELSE_640:
IF_END_640:
IF_STMT_658:
    CMP      r3, #2
    BNE      ELSE_658
THEN_658:
IF_STMT_659:
    LDR      r12, [sp,#52]
    CMP      r7, r12
    BLE      ELSE_659
THEN_659:
    STR      r7, [sp,#44]
    B        INLINE_END_702
ELSE_659:
    LDR      r12, [sp,#52]
    STR      r12, [sp,#44]
    B        INLINE_END_702
ELSE_658:
IF_END_658:
IF_STMT_660:
    CMP      r3, #3
    BNE      ELSE_660
THEN_660:
    MOV      r2, #1
    MOV      r4, #0
WHILE_STMT_663:
    CMP      r2, #1073741824
    BGE      DONE_663
IF_STMT_664:
    SDIV     r9, r7, r2
    MOV      r12, #2
    SDIV     r10, r9, r12
    LSL      r10, r10, #1
    SUB      r9, r9, r10
    CMP      r9, #1
    MOV      r9, #1
    BEQ      END_670
    LDR      r12, [sp,#52]
    SDIV     r10, r12, r2
    MOV      r12, #2
    SDIV     r14, r10, r12
    LSL      r14, r14, #1
    SUB      r10, r10, r14
    CMP      r10, #1
    MOVEQ    r9, #1
    MOVNE    r9, #0
END_670:
    CMP      r9, #0
    BEQ      ELSE_664
THEN_664:
    LSL      r9, r4, #1
    ADD      r9, r9, #1
    B        IF_END_664
ELSE_664:
    LSL      r9, r4, #1
IF_END_664:
    LSL      r2, r2, #1
    MOV      r4, r9
    B        WHILE_STMT_663
DONE_663:
    STR      r4, [sp,#44]
    B        INLINE_END_702
ELSE_660:
IF_END_660:
IF_STMT_681:
    CMP      r3, #4
    BNE      ELSE_681
THEN_681:
    MOV      r2, #1
    MOV      r3, #0
WHILE_STMT_684:
    CMP      r2, #1073741824
    BGE      DONE_684
IF_STMT_685:
    SDIV     r4, r7, r2
    MOV      r12, #2
    SDIV     r9, r4, r12
    LSL      r9, r9, #1
    SUB      r4, r4, r9
    CMP      r4, #1
    MOV      r4, #0
    BNE      END_691
    LDR      r12, [sp,#52]
    SDIV     r9, r12, r2
    MOV      r12, #2
    SDIV     r10, r9, r12
    LSL      r10, r10, #1
    SUB      r9, r9, r10
    CMP      r9, #1
    MOVEQ    r4, #1
    MOVNE    r4, #0
END_691:
    CMP      r4, #0
    BEQ      ELSE_685
THEN_685:
    LSL      r4, r3, #1
    ADD      r4, r4, #1
    B        IF_END_685
ELSE_685:
    LSL      r4, r3, #1
IF_END_685:
    LSL      r2, r2, #1
    MOV      r3, r4
    B        WHILE_STMT_684
DONE_684:
    STR      r3, [sp,#44]
    B        INLINE_END_702
ELSE_681:
IF_END_681:
    MOV      r12, #0
    STR      r12, [sp,#44]
    B        INLINE_END_702
INLINE_END_702:
    LDR      r12, [sp,#40]
    ADD      r2, r12, #1
IF_STMT_522:
    LDR      r12, [sp,#48]
    CMP      r2, r12
    BLT      ELSE_522
THEN_522:
    LDR      r12, [sp,#44]
    STR      r12, [sp,#32]
    B        DONE_510
ELSE_522:
    LDR      r12, [sp,#44]
    STR      r12, [sp,#32]
    STR      r2, [sp,#40]
IF_END_522:
    B        WHILE_STMT_510
DONE_510:
    LDR      r12, [sp,#28]
    ADD      r2, r12, #1
IF_STMT_528:
    LDR      r12, [sp,#36]
    CMP      r2, r12
    BLT      ELSE_528
THEN_528:
    LDR      r12, [sp,#32]
    STR      r12, [sp,#20]
    B        DONE_481
ELSE_528:
    LDR      r12, [sp,#32]
    STR      r12, [sp,#20]
    STR      r2, [sp,#28]
IF_END_528:
    B        WHILE_STMT_481
DONE_481:
    LDR      r12, [sp,#24]
    LDR      r11, [sp,#8]
    ADD      r2, r12, r11
    LSL      r2, r2, #2
    LDR      r12, [sp,#16]
    LDR      r11, [sp,#20]
    STR      r11, [r12,r2]
    LDR      r12, [sp,#8]
    ADD      r2, r12, #1
IF_STMT_539:
    LDR      r12, [sp,#12]
    CMP      r2, r12
    BLT      ELSE_539
THEN_539:
    B        DONE_410
ELSE_539:
    STR      r2, [sp,#8]
IF_END_539:
    B        WHILE_STMT_410
DONE_410:
    LDR      r12, [sp,#0]
    ADD      r2, r12, #1
IF_STMT_545:
    LDR      r12, [sp,#4]
    CMP      r2, r12
    BLT      ELSE_545
THEN_545:
    B        DONE_265
ELSE_545:
    STR      r2, [sp,#0]
IF_END_545:
    B        WHILE_STMT_265
DONE_265:
    LDR      lr, [sp,#88]
    ADD      r12, sp, #56
    LDM      r12, {r4,r5,r6,r7,r8,r9,r10,r11}
    ADD      sp, sp, #92
    MOV      pc, lr

.data
.global __ARRAY__a
__ARRAY__a:
.space	40000000

.data
.global __ARRAY__b
__ARRAY__b:
.space	40000000

.data
.global __ARRAY__kernelid
__ARRAY__kernelid:
.space	40000
.text
.global memmove
.type memmove, %function
memmove:
    SUB      sp, sp, #12
    STR      r4, [sp,#0]
    STR      r5, [sp,#4]
    MOV      r3, #0
WHILE_STMT_556:
    CMP      r3, r2
    BGE      DONE_556
    LSL      r4, r3, #2
    MOV      r12, r1
    LDR      r5, [r4,r12]
    STR      r5, [r0,r4]
    ADD      r3, r3, #1
    B        WHILE_STMT_556
DONE_556:
    LDR      r4, [sp,#0]
    LDR      r5, [sp,#4]
    ADD      sp, sp, #12
    MOV      pc, lr
.text
.global main
.type main, %function
main:
    SUB      sp, sp, #148
    STR      lr, [sp,#144]
    ADD      r12, sp, #112
    STM      r12, {r4,r5,r6,r7,r8,r9,r10,r11}
    BL       getint
    MOV      r4, r0
    BL       getint
    MOV      r5, r0
    BL       getint
    MOV      r6, r0
    mov32I   r0, __ARRAY__a
    BL       getarray
    mov32I   r0, __ARRAY__kernelid
    BL       getarray
    MOV      r7, r0
    MOV      r0, #0
    BL       _sysy_starttime
    MOV      r12, #0
    STR      r12, [sp,#4]
    MUL      r12, r5, r6
    STR      r12, [sp,#0]
WHILE_STMT_579:
    LDR      r12, [sp,#4]
    CMP      r12, r7
    BGE      DONE_579
    LDR      r12, [sp,#4]
    LSL      r1, r12, #2
    mov32I   r12, __ARRAY__kernelid
    MOV      r11, r1
    LDR      r1, [r12,r11]
    STR      r1, [sp,#56]
    mov32I   r2, __ARRAY__a
    mov32I   r12, __ARRAY__b
    STR      r12, [sp,#24]
    STR      r5, [sp,#12]
    STR      r6, [sp,#20]
    MOV      r14, r4
    MOV      r12, #0
    STR      r12, [sp,#8]
WHILE_STMT_710:
    MOV      r12, #0
    STR      r12, [sp,#16]
    MOV      r12, #2
    SDIV     r8, r14, r12
    LDR      r12, [sp,#8]
    LDR      r11, [sp,#20]
    MUL      r12, r12, r11
    STR      r12, [sp,#32]
    LDR      r12, [sp,#8]
    SUB      r0, r12, r8
WHILE_STMT_715:
    MOV      r12, #0
    STR      r12, [sp,#28]
    STR      r0, [sp,#36]
    LDR      r12, [sp,#16]
    SUB      r10, r12, r8
    LDR      r12, [sp,#8]
    ADD      r12, r12, r8
    STR      r12, [sp,#44]
WHILE_STMT_722:
    LDR      r12, [sp,#28]
    STR      r12, [sp,#40]
    STR      r10, [sp,#48]
    MOV      r12, #2
    SDIV     r9, r14, r12
    LDR      r12, [sp,#16]
    ADD      r12, r12, r9
    STR      r12, [sp,#52]
WHILE_STMT_727:
    STR      r2, [sp,#60]
    LDR      r9, [sp,#12]
    LDR      r12, [sp,#20]
    STR      r12, [sp,#68]
    LDR      r3, [sp,#36]
    LDR      r12, [sp,#48]
    STR      r12, [sp,#64]
IF_STMT_733:
    CMP      r3, #0
    MOV      r1, #1
    BLT      END_735
    LDR      r12, [sp,#64]
    CMP      r12, #0
    MOVLT    r1, #1
    MOVGE    r1, #0
END_735:
    CMP      r1, #0
    MOV      r1, #1
    BNE      END_738
    CMP      r3, r9
    MOVGE    r1, #1
    MOVLT    r1, #0
END_738:
    CMP      r1, #0
    MOV      r1, #1
    BNE      END_741
    LDR      r12, [sp,#64]
    LDR      r11, [sp,#68]
    CMP      r12, r11
    MOVGE    r1, #1
    MOVLT    r1, #0
END_741:
    CMP      r1, #0
    BEQ      ELSE_733
THEN_733:
    MOV      r1, #0
    B        INLINE_END_744
ELSE_733:
IF_END_733:
    LDR      r12, [sp,#68]
    MUL      r3, r3, r12
    LDR      r12, [sp,#64]
    ADD      r3, r3, r12
    LSL      r3, r3, #2
    LDR      r12, [sp,#60]
    LDR      r1, [r3,r12]
    B        INLINE_END_744
INLINE_END_744:
    LDR      r12, [sp,#56]
    STR      r12, [sp,#84]
    LDR      r12, [sp,#40]
    STR      r12, [sp,#80]
    STR      r1, [sp,#72]
IF_STMT_752:
    LDR      r12, [sp,#84]
    CMP      r12, #0
    BNE      ELSE_752
THEN_752:
    LDR      r12, [sp,#80]
    LDR      r11, [sp,#72]
    ADD      r1, r12, r11
WHILE_STMT_756:
    CMP      r1, #1073741824
    BLE      DONE_756
    SUB      r1, r1, #1073741824
    B        WHILE_STMT_756
DONE_756:
WHILE_STMT_759:
    CMP      r1, #0
    BGE      DONE_759
    ADD      r1, r1, #1073741824
    B        WHILE_STMT_759
DONE_759:
    STR      r1, [sp,#76]
    B        INLINE_END_762
INLINE_END_762:
    B        INLINE_END_764
ELSE_752:
IF_END_752:
IF_STMT_765:
    LDR      r12, [sp,#84]
    CMP      r12, #1
    BNE      ELSE_765
THEN_765:
    MOV      r12, #1
    STR      r12, [sp,#92]
    MOV      r12, #0
    STR      r12, [sp,#88]
WHILE_STMT_768:
    LDR      r12, [sp,#92]
    CMP      r12, #1073741824
    BGE      DONE_768
IF_STMT_769:
    LDR      r12, [sp,#80]
    LDR      r11, [sp,#92]
    SDIV     r3, r12, r11
    MOV      r12, #2
    SDIV     r9, r3, r12
    LSL      r9, r9, #1
    SUB      r3, r3, r9
    LDR      r12, [sp,#72]
    LDR      r11, [sp,#92]
    SDIV     r9, r12, r11
    MOV      r12, #2
    SDIV     r1, r9, r12
    LSL      r1, r1, #1
    SUB      r1, r9, r1
    CMP      r3, r1
    BNE      ELSE_769
THEN_769:
    LDR      r12, [sp,#88]
    LSL      r1, r12, #1
    B        IF_END_769
ELSE_769:
    LDR      r12, [sp,#88]
    LSL      r3, r12, #1
    ADD      r1, r3, #1
IF_END_769:
    LDR      r12, [sp,#92]
    LSL      r12, r12, #1
    STR      r12, [sp,#92]
    STR      r1, [sp,#88]
    B        WHILE_STMT_768
DONE_768:
    LDR      r12, [sp,#88]
    STR      r12, [sp,#76]
    B        INLINE_END_764
ELSE_765:
IF_END_765:
IF_STMT_783:
    LDR      r12, [sp,#84]
    CMP      r12, #2
    BNE      ELSE_783
THEN_783:
IF_STMT_784:
    LDR      r12, [sp,#80]
    LDR      r11, [sp,#72]
    CMP      r12, r11
    BLE      ELSE_784
THEN_784:
    LDR      r12, [sp,#80]
    STR      r12, [sp,#76]
    B        INLINE_END_764
ELSE_784:
    LDR      r12, [sp,#72]
    STR      r12, [sp,#76]
    B        INLINE_END_764
ELSE_783:
IF_END_783:
IF_STMT_785:
    LDR      r12, [sp,#84]
    CMP      r12, #3
    BNE      ELSE_785
THEN_785:
    MOV      r12, #1
    STR      r12, [sp,#100]
    MOV      r12, #0
    STR      r12, [sp,#96]
WHILE_STMT_788:
    LDR      r12, [sp,#100]
    CMP      r12, #1073741824
    BGE      DONE_788
IF_STMT_789:
    LDR      r12, [sp,#80]
    LDR      r11, [sp,#100]
    SDIV     r9, r12, r11
    MOV      r12, #2
    SDIV     r3, r9, r12
    LSL      r3, r3, #1
    SUB      r3, r9, r3
    CMP      r3, #1
    MOV      r3, #1
    BEQ      END_795
    LDR      r12, [sp,#72]
    LDR      r11, [sp,#100]
    SDIV     r9, r12, r11
    MOV      r12, #2
    SDIV     r1, r9, r12
    LSL      r1, r1, #1
    SUB      r1, r9, r1
    CMP      r1, #1
    MOVEQ    r3, #1
    MOVNE    r3, #0
END_795:
    CMP      r3, #0
    BEQ      ELSE_789
THEN_789:
    LDR      r12, [sp,#96]
    LSL      r1, r12, #1
    ADD      r1, r1, #1
    B        IF_END_789
ELSE_789:
    LDR      r12, [sp,#96]
    LSL      r1, r12, #1
IF_END_789:
    LDR      r12, [sp,#100]
    LSL      r12, r12, #1
    STR      r12, [sp,#100]
    STR      r1, [sp,#96]
    B        WHILE_STMT_788
DONE_788:
    LDR      r12, [sp,#96]
    STR      r12, [sp,#76]
    B        INLINE_END_764
ELSE_785:
IF_END_785:
IF_STMT_806:
    LDR      r12, [sp,#84]
    CMP      r12, #4
    BNE      ELSE_806
THEN_806:
    MOV      r12, #1
    STR      r12, [sp,#108]
    MOV      r12, #0
    STR      r12, [sp,#104]
WHILE_STMT_809:
    LDR      r12, [sp,#108]
    CMP      r12, #1073741824
    BGE      DONE_809
IF_STMT_810:
    LDR      r12, [sp,#80]
    LDR      r11, [sp,#108]
    SDIV     r9, r12, r11
    MOV      r12, #2
    SDIV     r3, r9, r12
    LSL      r3, r3, #1
    SUB      r3, r9, r3
    CMP      r3, #1
    MOV      r3, #0
    BNE      END_816
    LDR      r12, [sp,#72]
    LDR      r11, [sp,#108]
    SDIV     r9, r12, r11
    MOV      r12, #2
    SDIV     r1, r9, r12
    LSL      r1, r1, #1
    SUB      r1, r9, r1
    CMP      r1, #1
    MOVEQ    r3, #1
    MOVNE    r3, #0
END_816:
    CMP      r3, #0
    BEQ      ELSE_810
THEN_810:
    LDR      r12, [sp,#104]
    LSL      r1, r12, #1
    ADD      r1, r1, #1
    B        IF_END_810
ELSE_810:
    LDR      r12, [sp,#104]
    LSL      r1, r12, #1
IF_END_810:
    LDR      r12, [sp,#108]
    LSL      r12, r12, #1
    STR      r12, [sp,#108]
    STR      r1, [sp,#104]
    B        WHILE_STMT_809
DONE_809:
    LDR      r12, [sp,#104]
    STR      r12, [sp,#76]
    B        INLINE_END_764
ELSE_806:
IF_END_806:
    MOV      r12, #0
    STR      r12, [sp,#76]
    B        INLINE_END_764
INLINE_END_764:
    LDR      r12, [sp,#48]
    ADD      r1, r12, #1
IF_STMT_828:
    LDR      r12, [sp,#52]
    CMP      r1, r12
    BLT      ELSE_828
THEN_828:
    LDR      r12, [sp,#76]
    STR      r12, [sp,#40]
    B        DONE_727
ELSE_828:
    LDR      r12, [sp,#76]
    STR      r12, [sp,#40]
    STR      r1, [sp,#48]
IF_END_828:
    B        WHILE_STMT_727
DONE_727:
    LDR      r12, [sp,#36]
    ADD      r1, r12, #1
IF_STMT_832:
    LDR      r12, [sp,#44]
    CMP      r1, r12
    BLT      ELSE_832
THEN_832:
    LDR      r12, [sp,#40]
    STR      r12, [sp,#28]
    B        DONE_722
ELSE_832:
    LDR      r12, [sp,#40]
    STR      r12, [sp,#28]
    STR      r1, [sp,#36]
IF_END_832:
    B        WHILE_STMT_722
DONE_722:
    LDR      r12, [sp,#32]
    LDR      r11, [sp,#16]
    ADD      r1, r12, r11
    LSL      r1, r1, #2
    LDR      r12, [sp,#24]
    LDR      r11, [sp,#28]
    STR      r11, [r12,r1]
    LDR      r12, [sp,#16]
    ADD      r1, r12, #1
IF_STMT_838:
    LDR      r12, [sp,#20]
    CMP      r1, r12
    BLT      ELSE_838
THEN_838:
    B        DONE_715
ELSE_838:
    STR      r1, [sp,#16]
IF_END_838:
    B        WHILE_STMT_715
DONE_715:
    LDR      r12, [sp,#8]
    ADD      r0, r12, #1
IF_STMT_841:
    LDR      r12, [sp,#12]
    CMP      r0, r12
    BLT      ELSE_841
THEN_841:
    B        DONE_710
ELSE_841:
    STR      r0, [sp,#8]
IF_END_841:
    B        WHILE_STMT_710
DONE_710:
    B        INLINE_END_843
INLINE_END_843:
    mov32I   r0, __ARRAY__a
    mov32I   r1, __ARRAY__b
    LDR      r2, [sp,#0]
    MOV      r3, #0
WHILE_STMT_848:
    CMP      r3, r2
    BGE      DONE_848
    LSL      r8, r3, #2
    MOV      r12, r1
    LDR      r9, [r8,r12]
    STR      r9, [r0,r8]
    ADD      r3, r3, #1
    B        WHILE_STMT_848
DONE_848:
    B        INLINE_END_853
INLINE_END_853:
    LDR      r12, [sp,#4]
    ADD      r12, r12, #1
    STR      r12, [sp,#4]
    B        WHILE_STMT_579
DONE_579:
    MOV      r0, #0
    BL       _sysy_stoptime
    mov32I   r1, __ARRAY__a
    LDR      r0, [sp,#0]
    BL       putarray
    MOV      r0, #0
    LDR      lr, [sp,#144]
    ADD      r12, sp, #112
    LDM      r12, {r4,r5,r6,r7,r8,r9,r10,r11}
    ADD      sp, sp, #148
    MOV      pc, lr
