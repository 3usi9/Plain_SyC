
#######################################################
###Generated by PlainSyc, a plain SysC Compiler########
##### presented by bzq @ hust##########################
#######################################################
.arch armv8-a
.arm
.fpu vfp
.macro mov32I, reg, val
    movw \reg, #:lower16:\val
    movt \reg, #:upper16:\val
.endm


.data
.global __VAR__n
__VAR__n:
.space	4
.text
.global meanless_calculation
.type meanless_calculation, %function
meanless_calculation:
    SUB      sp, sp, #12
    STR      r4, [sp,#0]
    STR      r5, [sp,#4]
    MOV      r2, #0
    MOV      r3, #0
WHILE_STMT_7:
    CMP      r2, r0
    MOV      r4, #0
    BGE      END_22
    CMP      r2, r1
    MOVLT    r4, #1
    MOVGE    r4, #0
END_22:
    CMP      r4, #0
    BEQ      DONE_7
    ADD      r4, r2, #1
    ADD      r5, r3, r0
    ADD      r3, r5, r4
    MOV      r2, r4
    B        WHILE_STMT_7
DONE_7:
    MOV      r0, r3
    LDR      r4, [sp,#0]
    LDR      r5, [sp,#4]
    ADD      sp, sp, #12
    MOV      pc, lr
.text
.global swap
.type swap, %function
swap:
    SUB      sp, sp, #16
    ADD      r12, sp, #0
    STM      r12, {r4,r5,r6,r11}
    MOV      r4, r1
    MOV      r1, r2
    LSL      r2, r4, #2
    MOV      r12, r0
    LDR      r3, [r2,r12]
    LSL      r5, r1, #2
    MOV      r12, r0
    LDR      r6, [r5,r12]
    STR      r6, [r0,r2]
    STR      r3, [r0,r5]
    MOV      r0, r4
    ADD      r12, sp, #0
    LDM      r12, {r4,r5,r6,r11}
    ADD      sp, sp, #16
    MOV      pc, lr
.text
.global median
.type median, %function
median:
    SUB      sp, sp, #52
    STR      lr, [sp,#48]
    ADD      r12, sp, #16
    STM      r12, {r4,r5,r6,r7,r8,r9,r10,r11}
    STR      r0, [sp,#4]
    MOV      r5, r1
    STR      r2, [sp,#8]
    STR      r3, [sp,#12]
    LSL      r8, r5, #2
    LDR      r12, [sp,#4]
    LDR      r9, [r8,r12]
    LDR      r12, [sp,#8]
    ADD      r0, r12, #1
    MOV      r12, #0
    STR      r12, [sp,#0]
    MOV      r10, r5
    MOV      r4, r0
WHILE_STMT_55:
    LDR      r1, [sp,#0]
WHILE_STMT_94:
    CMP      r10, r4
    BGE      DONE_94
    SUB      r2, r4, #1
IF_STMT_104:
    LSL      r3, r2, #2
    LDR      r12, [sp,#4]
    LDR      r3, [r3,r12]
    CMP      r3, r9
    BGE      ELSE_104
THEN_104:
    MOV      r4, r2
    B        DONE_94
ELSE_104:
    MOV      r4, r2
IF_END_104:
    ADD      r1, r1, #1
    B        WHILE_STMT_94
DONE_94:
    MOV      r6, r10
    MOV      r7, r1
WHILE_STMT_110:
    CMP      r6, r4
    BGE      DONE_110
    ADD      r1, r6, #1
IF_STMT_120:
    LSL      r2, r1, #2
    LDR      r12, [sp,#4]
    LDR      r2, [r2,r12]
    CMP      r2, r9
    BLT      ELSE_120
THEN_120:
    MOV      r6, r1
    B        DONE_110
ELSE_120:
    MOV      r6, r1
IF_END_120:
    SUB      r7, r7, #1
    B        WHILE_STMT_110
DONE_110:
IF_STMT_126:
    CMP      r6, r4
    BNE      ELSE_126
THEN_126:
    MOV      r10, r6
    STR      r7, [sp,#0]
    B        DONE_55
ELSE_126:
    MOV      r2, r4
    MOV      r1, r6
    LDR      r12, [sp,#4]
    MOV      r0, r12
    BL       swap
    MOV      r10, r6
    MOV      r0, r4
    STR      r7, [sp,#0]
IF_END_126:
    MOV      r4, r0
    B        WHILE_STMT_55
DONE_55:
    LDR      r12, [sp,#4]
    STR      r9, [r12,r8]
    MOV      r2, r10
    MOV      r1, r5
    LDR      r12, [sp,#4]
    MOV      r0, r12
    BL       swap
IF_STMT_134:
    LDR      r12, [sp,#12]
    CMP      r10, r12
    BLE      ELSE_134
THEN_134:
    LDR      r3, [sp,#12]
    MOV      r2, r10
    MOV      r1, r5
    LDR      r12, [sp,#4]
    MOV      r0, r12
    BL       median
    LDR      lr, [sp,#48]
    ADD      r12, sp, #16
    LDM      r12, {r4,r5,r6,r7,r8,r9,r10,r11}
    ADD      sp, sp, #52
    MOV      pc, lr
ELSE_134:
IF_END_134:
IF_STMT_136:
    LDR      r12, [sp,#12]
    CMP      r10, r12
    BGE      ELSE_136
THEN_136:
    ADD      r1, r10, #1
    LDR      r3, [sp,#12]
    LDR      r2, [sp,#8]
    LDR      r12, [sp,#4]
    MOV      r0, r12
    BL       median
    LDR      lr, [sp,#48]
    ADD      r12, sp, #16
    LDM      r12, {r4,r5,r6,r7,r8,r9,r10,r11}
    ADD      sp, sp, #52
    MOV      pc, lr
ELSE_136:
IF_END_136:
    LDR      r0, [sp,#0]
    LDR      lr, [sp,#48]
    ADD      r12, sp, #16
    LDM      r12, {r4,r5,r6,r7,r8,r9,r10,r11}
    ADD      sp, sp, #52
    MOV      pc, lr

.data
.global __ARRAY__a
__ARRAY__a:
.space	40000000
.text
.global main
.type main, %function
main:
    SUB      sp, sp, #8
    STR      lr, [sp,#4]
    STR      r11, [sp,#0]
    mov32I   r0, __ARRAY__a
    BL       getarray
    mov32I   r12, __VAR__n
    STR      r0, [r12]
    MOV      r0, #0
    BL       _sysy_starttime
    mov32I   r12, __VAR__n
    LDR      r12, [r12]
    SUB      r2, r12, #1
    mov32I   r12, __VAR__n
    LDR      r12, [r12]
    MOV      r11, #2
    SDIV     r3, r12, r11
    MOV      r1, #0
    mov32I   r0, __ARRAY__a
    BL       median
    MOV      r0, #0
    BL       _sysy_stoptime
    mov32I   r1, __ARRAY__a
    mov32I   r0, __VAR__n
    LDR      r0, [r0]
    BL       putarray
    mov32I   r12, __VAR__n
    LDR      r12, [r12]
    MOV      r11, #2
    SDIV     r0, r12, r11
    LSL      r0, r0, #2
    mov32I   r12, __ARRAY__a
    MOV      r11, r0
    LDR      r0, [r12,r11]
    MOV      r12, #256
    SDIV     r1, r0, r12
    LSL      r1, r1, #8
    SUB      r0, r0, r1
    LDR      lr, [sp,#4]
    LDR      r11, [sp,#0]
    ADD      sp, sp, #8
    MOV      pc, lr
